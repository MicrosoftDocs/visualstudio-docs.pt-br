### YamlMime:FAQ
metadata:
  title: EditorConfig versus analisadores
  ms.date: 03/11/2019
  description: Saiba mais .NET Compiler Platform análise de código baseada em Visual Studio. Consulte respostas para perguntas sobre arquivos EditorConfig, conjuntos de regras e outros tópicos.
  ms.custom: SEO-VS-2020
  ms.topic: conceptual
  helpviewer_keywords:
  - analyzers, faq
  author: mikejo5000
  ms.author: mikejo
  manager: jmartens
  ms.workload:
  - multiple
  ms.openlocfilehash: a9ff57daf22d61758b3bbc7d99beb6d2555b7e18
  ms.sourcegitcommit: d4887ef2ca97c55e2dad9f179eec2c9631d91c95
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 05/06/2021
  ms.locfileid: "108800324"
title: Perguntas frequentes sobre análise de código
summary: Esta página contém respostas para algumas perguntas frequentes sobre .NET Compiler Platform de código baseada em Visual Studio.
sections:
- name: Análise de código versus EditorConfig
  questions:
  - question: >
      Devo usar a análise de código ou EditorConfig para verificar o estilo do código?
    answer: >
      A análise de código e os arquivos EditorConfig funcionam manualmente. Quando você define estilos de código em um [arquivo EditorConfig](/dotnet/fundamentals/code-analysis/code-style-rule-options) ou na página Opções do [editor](../ide/code-styles-and-code-cleanup.md) de texto, na verdade, você está configurando os analisadores de código que são integrados Visual Studio. Os arquivos EditorConfig podem ser usados para habilitar ou desabilitar regras de analisador e também para configurar pacotes do analisador NuGet.
- name: EditorConfig versus conjuntos de regras
  questions:
  - question: >
      Devo configurar meus analisadores usando um conjunto de regras ou um arquivo EditorConfig?
    answer: >
      Os conjuntos de regras e os arquivos EditorConfig podem coexistir e ambos podem ser usados para configurar analisadores. Os arquivos EditorConfig e os conjuntos de regras permitem habilitar e desabilitar regras e definir sua severidade.


      No entanto, os arquivos EditorConfig também oferecem maneiras adicionais de configurar regras:


      - Para os analisadores de qualidade de código do .NET, os arquivos EditorConfig permitem definir quais tipos [de código analisar .](/dotnet/fundamentals/code-analysis/code-quality-rule-options)

      - Para os analisadores de estilo de código do .NET que são integrados Visual Studio, os arquivos EditorConfig permitem definir os estilos de código preferenciais para uma base de código. [](/dotnet/fundamentals/code-analysis/code-style-rule-options)


      Além de conjuntos de regras e arquivos EditorConfig, alguns analisadores são [](../ide/build-actions.md#build-action-values) configurados por meio do uso de arquivos de texto marcados como arquivos adicionais para os compiladores C# e VB.


      > [!NOTE]

      > - Os arquivos EditorConfig só podem ser usados para habilitar regras e definir sua severidade no Visual Studio 2019 versão 16.3 e posterior.

      > - Os arquivos EditorConfig não podem ser usados para configurar a análise herdada, enquanto os conjuntos de regras podem.
- name: Análise de código em compilações CI
  questions:
  - question: >
      A análise de código baseada em .NET Compiler Platform funciona em compilações de CI (integração contínua)?
    answer: >
      Sim. Para analisadores que são instalados a partir de um pacote NuGet, essas regras são [impostas no momento da compilação](roslyn-analyzers-overview.md#build-errors), incluindo durante uma compilação de CI. Os analisadores usados em compilações de CI respeitam a configuração de regra dos conjuntos de regras e dos arquivos EditorConfig. Atualmente, os analisadores de código que são criados no Visual Studio não estão disponíveis como um pacote NuGet e, portanto, essas regras não são impostas em uma compilação de CI.
- name: Analisadores IDE versus StyleCop
  questions:
  - question: >
      Qual é a diferença entre os analisadores de código do IDE do Visual Studio e os analisadores do StyleCop?
    answer: >
      O IDE do Visual Studio inclui analisadores internos que procuram problemas de qualidade e estilo de código. Essas regras ajudam você a usar novos recursos de linguagem à medida que são introduzidos e aprimoram a manutenção do seu código. Os analisadores IDE são continuamente atualizados com cada versão do Visual Studio.


      [Analisadores de StyleCop](https://github.com/DotNetAnalyzers/StyleCopAnalyzers) são analisadores de terceiros instalados como um pacote NuGet que verifica a consistência de estilo em seu código. Em geral, as regras de StyleCop permitem definir preferências pessoais para uma base de código sem recomendar um estilo em vez de outra.
- name: Analisadores de código versus análise herdada
  questions:
  - question: >
      Qual é a diferença entre análise herdada e análise de código baseada em .NET Compiler Platform?
    answer: >
      A análise de código baseada em .NET Compiler Platform analisa o código-fonte em tempo real e durante a compilação, enquanto a análise herdada analisa arquivos binários após a conclusão da compilação. Para obter mais informações, consulte [análise baseada em .net Compiler Platform versus análise herdada](../code-quality/net-analyzers-faq.yml#what-s-the-difference-between-legacy-fxcop-and--net-analyzers-).
- name: Analisadores do FxCop versus analisadores .NET
  questions:
  - question: >
      Qual é a diferença entre analisadores do FxCop e analisadores .NET?
    answer: >
      Ambos os analisadores do FxCop e os analisadores do .NET referem-se às implementações do analisador .NET Compiler Platform ("Roslyn") das regras de AC do FxCop. Antes do Visual Studio 2019 16,8 e do .NET 5,0, esses analisadores foram fornecidos como `Microsoft.CodeAnalysis.FxCopAnalyzers` [pacote NuGet](https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers). A partir do Visual Studio 2019 16.8 e .NET 5.0, esses analisadores são incluídos no [SDK do .NET.](/dotnet/fundamentals/code-analysis/overview) Eles também estão disponíveis como pacote `Microsoft.CodeAnalysis.NetAnalyzers` [NuGet.](https://www.nuget.org/packages/Microsoft.CodeAnalysis.NetAnalyzers) Considere a [migração de analisadores FxCop para analisadores do .NET.](migrate-from-fxcop-analyzers-to-net-analyzers.md)
- name: Tratar avisos como erros
  questions:
  - question: >
      Meu projeto usa a opção de build para tratar avisos como erros. Depois de migrar da análise herdada para a análise de código-fonte, todos os avisos de análise de código agora são exibidos como erros. Como posso evitar isso?
    answer: >
      Para impedir que avisos de análise de código são tratados como erros, siga estas etapas:

        1. Crie um arquivo .props com o seguinte conteúdo:

           ```xml
           <Project>
              <PropertyGroup>
                 <CodeAnalysisTreatWarningsAsErrors>false</CodeAnalysisTreatWarningsAsErrors>
              </PropertyGroup>
           </Project>
           ```

        2. Adicione uma linha ao arquivo de projeto .csproj ou .vbproj para importar o arquivo .props criado na etapa anterior. Essa linha deve ser colocada antes de qualquer linha que importe os arquivos .props do analisador. Por exemplo, se o arquivo .props for chamado codeanalysis.props:

           ```xml
           ...
           <Import Project="..\..\codeanalysis.props" Condition="Exists('..\..\codeanalysis.props')" />
           <Import Project="..\packages\Microsoft.CodeAnalysis.NetAnalyzers.5.0.0\build\Microsoft.CodeAnalysis.NetAnalyzers.props" Condition="Exists('..\packages\Microsoft.CodeAnalysis.NetAnalyzers.5.0.0\build\Microsoft.CodeAnalysis.NetAnalyzers.props')" />
           ...
           ```
- name: Página de propriedades da solução de análise de código
  questions:
  - question: >
      Onde está a Code Analysis de propriedades para a solução?
    answer: >
      A Code Analysis de propriedades no nível da solução foi removida em favor do grupo de propriedades compartilhadas mais confiável. Para gerenciar Code Analysis no nível do projeto, Code Analysis página de propriedades do Code Analysis ainda está disponível. (Para projetos gerenciados, também recomendamos migrar de rulesets para EditorConfig para configuração de regra.)  Para compartilhar conjuntos de regras em vários/todos os projetos em uma solução ou um repo, recomendamos definir um grupo de propriedades com a propriedade [CodeAnalysisRuleSet](../code-quality/using-rule-sets-to-group-code-analysis-rules.md#specify-a-rule-set-for-a-project) em um arquivo props/targets compartilhado ou *no arquivo Directory.props/Directory.targets.* Se você não tiver tais objetos ou destinos comuns importados por todos os seus projetos, considere adicionar esse grupo de propriedades a [um directory.props](../msbuild/customize-your-build.md) ou a um arquivo Directory.targets em um diretório de solução de nível superior, que é importado automaticamente em todos os arquivos de projeto definidos no diretório ou em seus subdados.
additionalContent: "\n## <a name=\"see-also\"></a>Consulte também\n   - [Visão geral dos analisadores](roslyn-analyzers-overview.md)\n   - [Configurações de convenção de codificação do .NET para EditorConfig](/dotnet/fundamentals/code-analysis/code-style-rule-options)"
